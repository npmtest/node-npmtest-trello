{"/home/travis/build/npmtest/node-npmtest-trello/test.js":"/* istanbul instrument in package npmtest_trello */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trello/lib.npmtest_trello.js":"/* istanbul instrument in package npmtest_trello */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_trello = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_trello = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-trello/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-trello && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_trello */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_trello\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_trello.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_trello.rollup.js'] =\n            local.assetsDict['/assets.npmtest_trello.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_trello.__dirname + '/lib.npmtest_trello.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-trello/node_modules/trello/main.js":"require('es6-promise').polyfill();\r\nvar rest = require('restler');\r\nvar objectAssign = require('object-assign');\r\n\r\nvar Trello = function (key, token) {\r\n    this.uri = \"https://api.trello.com\";\r\n    this.key = key;\r\n    this.token = token;\r\n};\r\n\r\nTrello.prototype.createQuery = function () {\r\n    return {key: this.key, token: this.token};\r\n};\r\n\r\nfunction makeRequest(fn, uri, options, callback) {\r\n    if (callback) {\r\n        fn(uri, options)\r\n            .once('complete', function (result) {\r\n                if (result instanceof Error) {\r\n                    callback(result);\r\n                } else {\r\n                    callback(null, result);\r\n                }\r\n            });\r\n    } else {\r\n        return new Promise(function(resolve, reject) {\r\n            fn(uri, options)\r\n                .once('complete', function (result) {\r\n                    if (result instanceof Error) {\r\n                        reject(result);\r\n                    } else {\r\n                        resolve(result);\r\n                    }\r\n                });\r\n        });\r\n    }\r\n}\r\n\r\nTrello.prototype.makeRequest = function (requestMethod, path, options, callback) {\r\n    options = options || {};\r\n\r\n    if (typeof requestMethod !== 'string') {\r\n        throw new TypeError(\"requestMethod should be a string\");\r\n    }\r\n    if (typeof options !== 'object') {\r\n        throw new TypeError(\"options should be an object\");\r\n    }\r\n\r\n    var method = requestMethod.toLowerCase();\r\n    var methods = {\r\n        'post': rest.post,\r\n        'get': rest.get,\r\n        'put': rest.put,\r\n        'delete': rest.del\r\n    };\r\n\r\n    if (!methods[method]) {\r\n        throw new Error(\"Unsupported requestMethod. Pass one of these methods: POST, GET, PUT, DELETE.\");\r\n    }\r\n    var keyTokenObj = this.createQuery();\r\n    var query = objectAssign({}, options, keyTokenObj);\r\n    return makeRequest(methods[method], this.uri + path, {query: query}, callback)\r\n};\r\n\r\nTrello.prototype.addBoard = function (name, description, organizationId, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n\r\n    if (description !== null)\r\n        query.desc = description;\r\n    if (organizationId !== null)\r\n        query.idOrganization = organizationId;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/boards', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.updateBoardPref = function (boardId, field, value, callback) {\r\n    var query = this.createQuery();\r\n    query.value = value;\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/boards/' + boardId + '/prefs/' + field, {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.addCard = function (name, description, listId, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n    query.idList = listId;\r\n\r\n    if (description !== null)\r\n        query.desc = description;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.getCard = function (boardId, cardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/cards/' + cardId, {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getCardsForList = function(listId, actions, callback) {\r\n    var query = this.createQuery();\r\n    if (actions)\r\n        query.actions = actions;\r\n    return makeRequest(rest.get, this.uri + '/1/lists/' + listId + '/cards', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.renameList = function (listId, name, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/lists/' + listId + '/name', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.addListToBoard = function (boardId, name, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/boards/' + boardId + '/lists', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.addMemberToBoard = function (boardId, memberId, type, callback) {\r\n    var query = this.createQuery();\r\n    var data = {type: type}; // Valid Values: 'normal','admin','observer'\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/boards/' + boardId + '/members/' + memberId, { data: data, query: query }, callback);\r\n};\r\n\r\nTrello.prototype.addCommentToCard = function (cardId, comment, callback) {\r\n    var query = this.createQuery();\r\n    query.text = comment;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards/' + cardId + '/actions/comments', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.addAttachmentToCard = function (cardId, url, callback) {\r\n    var query = this.createQuery();\r\n    query.url = url;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards/' + cardId + '/attachments', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.addMemberToCard = function (cardId, memberId, callback) {\r\n    var query = this.createQuery();\r\n    query.value = memberId;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards/' + cardId + '/members', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.getBoards = function(memberId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/members/' + memberId + '/boards', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getOrgBoards = function (organizationId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/organizations/' + organizationId + '/boards', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addChecklistToCard = function (cardId, name, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards/' + cardId + '/checklists', { query: query }, callback);\r\n};\r\n\r\nTrello.prototype.addExistingChecklistToCard = function (cardId, checklistId, callback) {\r\n    var query = this.createQuery();\r\n    query.idChecklistSource = checklistId;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/cards/' + cardId + '/checklists', { query: query }, callback);\r\n};\r\n\r\nTrello.prototype.getChecklistsOnCard = function (cardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/cards/' + cardId + '/checklists', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addItemToChecklist = function (checkListId, name, pos, callback) {\r\n    var query = this.createQuery();\r\n    query.name = name;\r\n    query.pos = pos;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/checklists/' + checkListId + '/checkitems', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.updateCard = function (cardId, field, value, callback) {\r\n    var query = this.createQuery();\r\n    query.value = value;\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/cards/' + cardId + '/' + field, {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.updateChecklist = function (checklistId, field, value, callback) {\r\n    var query = this.createQuery();\r\n    query.value = value;\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/checklists/' + checklistId + '/' + field, {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.updateCardName = function (cardId, name, callback) {\r\n    return this.updateCard(cardId, 'name', name, callback);\r\n};\r\n\r\nTrello.prototype.updateCardDescription = function (cardId, description, callback) {\r\n    return this.updateCard(cardId, 'desc', description, callback);\r\n};\r\n\r\nTrello.prototype.updateCardList = function (cardId, listId, callback) {\r\n    return this.updateCard(cardId, 'idList', listId, callback);\r\n};\r\n\r\nTrello.prototype.getMember = function(memberId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/member/' + memberId, {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getMemberCards = function (memberId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/members/' + memberId + '/cards', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getBoardMembers = function (boardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/members', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getOrgMembers = function (organizationId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/organizations/' + organizationId + '/members', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getListsOnBoard = function (boardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/lists', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getListsOnBoardByFilter = function(boardId, filter, callback) {\r\n    var query = this.createQuery();\r\n    query.filter = filter;\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/lists', {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.getCardsOnBoard = function (boardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/cards', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.getCardsOnList = function (listId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/lists/' + listId + '/cards', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.deleteCard = function (cardId, callback) {\r\n    return makeRequest(rest.del, this.uri + '/1/cards/' + cardId, {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addWebhook = function (description, callbackUrl, idModel, callback) {\r\n    var query = this.createQuery();\r\n    var data = {};\r\n\r\n    data.description = description;\r\n    data.callbackURL = callbackUrl;\r\n    data.idModel = idModel;\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/tokens/' + this.token + '/webhooks/', { data: data, query: query }, callback);\r\n};\r\n\r\nTrello.prototype.deleteWebhook = function (webHookId, callback) {\r\n    var query = this.createQuery();\r\n\r\n    return makeRequest(rest.del, this.uri + '/1/webhooks/' + webHookId, { query: query }, callback);\r\n};\r\n\r\nTrello.prototype.getLabelsForBoard = function(boardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/boards/' + boardId + '/labels', {query:this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addLabelOnBoard = function(boardId, name, color, callback) {\r\n    var query = this.createQuery();\r\n    var data = {\r\n        idBoard: boardId,\r\n        color: color,\r\n        name: name\r\n    };\r\n\r\n    return makeRequest(rest.post, this.uri + '/1/labels', {data: data, query:query}, callback);\r\n};\r\n\r\nTrello.prototype.deleteLabel = function(labelId, callback) {\r\n    return makeRequest(rest.del, this.uri + '/1/labels/' + labelId, {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addLabelToCard = function(cardId, labelId, callback) {\r\n    var query = this.createQuery();\r\n    var data = { value: labelId };\r\n    return makeRequest(rest.post, this.uri+'/1/cards/' + cardId + '/idLabels', {query:query, data:data}, callback);\r\n};\r\n\r\nTrello.prototype.deleteLabelFromCard = function(cardId, labelId, callback){\r\n    return makeRequest(rest.del, this.uri + '/1/cards/' + cardId + '/idLabels/'+labelId, {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.updateLabel = function (labelId, field, value, callback) {\r\n    var query = this.createQuery();\r\n    query.value = value;\r\n\r\n    return makeRequest(rest.put, this.uri + '/1/labels/' + labelId + '/' + field, {query: query}, callback);\r\n};\r\n\r\nTrello.prototype.updateLabelName = function (labelId, name, callback) {\r\n    return this.updateLabel(labelId, 'name', name, callback);\r\n};\r\n\r\nTrello.prototype.updateLabelColor = function (labelId, color, callback) {\r\n    return this.upadateLabel(labelId, 'color', color, callback);\r\n};\r\n\r\nTrello.prototype.getCardStickers = function (cardId, callback) {\r\n    return makeRequest(rest.get, this.uri + '/1/cards/' + cardId + '/stickers', {query: this.createQuery()}, callback);\r\n};\r\n\r\nTrello.prototype.addStickerToCard = function(cardId, image, left, top, zIndex, rotate, callback) {\r\n    var query = this.createQuery();\r\n    var data = {\r\n      image: image,\r\n      top: top,\r\n      left: left,\r\n      zIndex: zIndex,\r\n      rotate: rotate,\r\n    };\r\n    return makeRequest(rest.post, this.uri+'/1/cards/' + cardId + '/stickers', {query:query, data:data}, callback);\r\n};\r\n\r\nmodule.exports = Trello;"}